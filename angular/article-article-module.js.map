{"version":3,"sources":["webpack:///./src/app/article/article.component.ts","webpack:///./src/app/article/article.module.ts","webpack:///./src/app/article/save-dialog-folders/save-dialog-folders.component.ts","webpack:///./src/app/article/save-dialog-form/save-dialog-form.component.ts","webpack:///./src/app/article/save-dialog.component.ts","webpack:///./src/app/article/sections/sections.component.ts","webpack:///./src/app/article/services/article.service.ts","webpack:///./src/app/article/services/save-dialog.service.ts","webpack:///./src/app/article/tool-bar/tool-bar.component.ts"],"names":[],"mappings":"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","file":"article-article-module.js","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\nimport { CoreService } from '../core/core.service';\nimport { ArticleService } from './services/article.service';\n\n@Component({\n    selector: 'app-article-component',\n    template: `\n        <app-tool-bar\n            [title]=\"this.title$ | async\"\n            [isSelectedListLength]=\"this.articleService.isSelectedList.length\"\n            (save)=\"this.articleService.save()\"\n        ></app-tool-bar>\n        <app-sections\n            [sections]=\"this.articleService.sections$ | async\"\n            (select)=\"this.articleService.select($event)\"\n        ></app-sections>\n    `,\n    providers: [ArticleService]\n})\n\nexport class ArticleComponent implements OnInit, OnDestroy {\n    sectionsSub: Subscription;\n\n    title$ = this.activatedRoute.params.pipe(\n        map(params => params.title)\n    );\n\n    constructor(\n        public coreService: CoreService,\n        public activatedRoute: ActivatedRoute,\n        public articleService: ArticleService\n    ) { }\n\n    ngOnInit() {\n        this.coreService.toolbarTitle$.next('Article');\n        this.sectionsSub = this.activatedRoute.params.pipe(\n            switchMap(params => this.articleService.loadSections(params))\n        ).subscribe();\n    }\n\n    ngOnDestroy() {\n        this.sectionsSub.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport {\n    MatBadgeModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatToolbarModule\n} from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\nimport { ArticleComponent } from './article.component';\nimport { SaveDialogComponent } from './save-dialog.component';\nimport { ToolBarComponent } from './tool-bar/tool-bar.component';\nimport { SectionsComponent } from './sections/sections.component';\nimport { SaveDialogFormComponent } from './save-dialog-form/save-dialog-form.component';\nimport { SaveDialogFoldersComponent } from './save-dialog-folders/save-dialog-folders.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatBadgeModule,\n        MatButtonModule,\n        MatCardModule,\n        MatDialogModule,\n        MatIconModule,\n        MatInputModule,\n        MatListModule,\n        MatToolbarModule,\n        RouterModule.forChild([\n            { path: ':language/:title', component: ArticleComponent }\n        ])\n    ],\n    declarations: [\n        ArticleComponent,\n        ToolBarComponent,\n        SaveDialogComponent,\n        SectionsComponent,\n        SaveDialogFormComponent,\n        SaveDialogFoldersComponent\n    ],\n    entryComponents: [SaveDialogComponent]\n})\nexport class ArticleModule { }\n","import { Component, Input } from '@angular/core';\nimport { Folder } from '@shared/models';\n\n@Component({\n    selector: 'app-save-dialog-folders',\n    template: `\n        <mat-list>\n            <h3 mat-subheader>Folders</h3>\n            <mat-list-item *ngFor=\"let folder of this.folders\" class=\"folder-list-item\">\n                <mat-icon [matBadge]=\"folder.cardsLength\" mat-list-icon>folder</mat-icon>\n                <button [mat-dialog-close]=\"folder\" mat-button>{{ folder.folderName }}</button>\n            </mat-list-item>\n        </mat-list>\n    `,\n    styles: [`\n        mat-list {\n            border: 1px solid #ddd;\n            margin-top: 16px;\n            overflow: auto;\n            max-height: 300px;\n                padding-top: 0px;\n        }\n        mat-list-item {\n            border-bottom: 1px solid #ddd;\n            cursor: pointer;\n        }\n        mat-list-item:hover {\n            background: #ddd !important;\n        }\n        mat-icon {\n            color: rgba(0, 0, 0, 0.54);\n        }\n        button {\n            width: 100%;\n            height: 100%;\n            text-align: left;\n            font-weight: 400;\n            position: absolute;\n            padding-left: 48px;\n        }\n        button:hover {\n            background: none !important;\n        }\n        h3 {\n            border-bottom: 1px solid #ddd;\n            background: #eee;\n            position: sticky;\n            top: 0px;\n            z-index: 1;\n            margin-bottom: 8px !important;\n        }\n    `]\n})\n\nexport class SaveDialogFoldersComponent {\n    @Input() folders: Folder[];\n}\n","import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n    selector: 'app-save-dialog-form',\n    template: `\n        <form #form=\"ngForm\">\n            <mat-form-field>\n                <input\n                    #newFolderName\n                    type=\"text\"\n                    placeholder=\"Add Folder\"\n                    autocorrect=\"off\"\n                    autocomplete=\"off\"\n                    matInput\n                />\n            </mat-form-field>\n            <div id=\"btn-container\">\n                <button color=\"warn\" mat-dialog-close mat-button> Cancel </button>\n                <button\n                    (click)=\"this.addFolder.emit(newFolderName.value)\"\n                    color=\"primary\"\n                    mat-button\n                >\n                    Save\n                </button>\n            </div>\n        </form>\n    `\n})\n\nexport class SaveDialogFormComponent {\n    @Output() addFolder = new EventEmitter();\n\n    @ViewChild('newFolderName') newFolderName: ElementRef;\n    @ViewChild('form') form: NgForm;\n}\n","import { Component } from '@angular/core';\n\nimport { SaveDialogService } from './services/save-dialog.service';\n\n@Component({\n    selector: 'app-save-dialog',\n    template: `\n        <app-save-dialog-form (addFolder)=\"this.saveDialogService.addFolder($event)\"></app-save-dialog-form>\n        <app-save-dialog-folders [folders]=\"this.saveDialogService.folders$ | async\"></app-save-dialog-folders>\n    `,\n    providers: [SaveDialogService]\n})\n\nexport class SaveDialogComponent {\n    constructor(public saveDialogService: SaveDialogService) { }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'app-sections',\n    template: `\n        <ng-container *ngFor=\"let section of this.sections\">\n            <ng-container *ngIf=\"section.paragraphs.length\">\n                <div *ngIf=\"section.header\" class=\"section-header mat-headline\">{{ section.header }}</div>\n                <ng-container *ngIf=\"!section.isSaved\">\n                    <mat-card *ngFor=\"let paragraph of section.paragraphs\">\n                        <mat-card-content [ngClass]=\"{ 'isSelected-content': paragraph.isSelected }\">{{ paragraph.text }}</mat-card-content>\n                        <mat-card-actions [ngClass]=\"{ 'isSelected-actions': paragraph.isSelected }\">\n                            <button\n                                *ngIf=\"paragraph.isSelected\"\n                                (click)=\"this.select.emit(paragraph)\"\n                                color=\"primary\"\n                                mat-button\n                            >\n                                {{ section.isSaved }} REMOVE\n                            </button>\n                            <button\n                                *ngIf=\"!paragraph.isSelected\"\n                                (click)=\"this.select.emit(paragraph)\"\n                                color=\"primary\"\n                                mat-button\n                            >\n                                SELECT\n                            </button>\n                        </mat-card-actions>\n                    </mat-card>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    `,\n    styles: [`\n        :host {\n            position: absolute;\n            bottom: 0px;\n            top: 120px;\n            overflow: auto;\n            background: #eee;\n        }\n        .section-header {\n            padding: 24px 16px 16px;\n            margin-top: 48px;\n            font-weight: 600;\n            text-align: center;\n            border-bottom: 1px solid #ddd;\n        }\n        mat-card {\n            padding: 0px;\n            margin: 24px 24px 48px;\n        }\n        mat-card-content {\n            padding: 24px;\n            margin: 0px;\n            font-size: 16px;\n        }\n        mat-card-actions {\n            padding: 8px !important;\n            margin: 0px 0px 16px;\n            border-top: 1px solid #ddd;\n            text-align: center;\n        }\n        button {\n            width: 100%;\n        }\n        .isSelected-content {\n            background: rgb(204, 204, 204);\n            border-bottom-color: rgb(170, 170, 170);\n        }\n        .isSelected-actions {\n            background: rgb(221, 221, 221);\n        }\n    `]\n})\n\nexport class SectionsComponent {\n    @Input() sections: any[];\n\n    @Output() select = new EventEmitter();\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { MatDialog } from '@angular/material';\n\nimport { BehaviorSubject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { NgFireService } from '@shared/services';\nimport { Card, Folder } from '@shared/models';\n\nimport { SaveDialogComponent } from '../save-dialog.component';\n\n@Injectable()\nexport class ArticleService {\n\n    isSelectedList = [];\n    sections$ = new BehaviorSubject<any[]>([]);\n\n    constructor(\n        private http: Http,\n        private ngFireService: NgFireService,\n        private matDialog: MatDialog\n    ) { }\n\n    loadSections(params: any) {\n        return this.http.get(\n            `https://${ params.language }.wikipedia.org/w/api.php?origin=*&format=json&action=query&prop=extracts|images&redirects=true&titles=${ params.title }`\n        ).pipe(\n            map(response => {\n                const responseHtml = response.json().query.pages[Object.keys(response.json().query.pages)[0]].extract;\n                return responseHtml.match(/<h(.)>.*?<\\/h\\1>|<p>.*?<\\/p>/g)\n                .reduce((prev, curr, i) => {\n                    const tmp = document.createElement('DIV');\n                    tmp.innerHTML = curr;\n                    const text = tmp.textContent || tmp.innerText || '';\n                    if (curr.match(/<h(.)>.*?<\\/h\\1>/g) && text) {\n                        prev.push({\n                            header: text,\n                            paragraphs: [],\n                            sectionIndex: prev.length\n                        });\n                    } else if (curr.match(/<p>.*?<\\/p>/g) && text) {\n                        prev[prev.length - 1].paragraphs.push({\n                            header: prev[prev.length - 1].header,\n                            isSelected: false,\n                            isSaved: false,\n                            paragraphId: i,\n                            paragraphIndex: prev[prev.length - 1].paragraphs.length,\n                            sectionIndex: prev[prev.length - 1].sectionIndex,\n                            text: text\n                        });\n                    }\n                    return prev;\n                }, [{ header: '', paragraphs: [], sectionIndex: 0 }]);\n            }),\n            tap(sections => this.sections$.next(sections))\n        );\n    }\n\n    select(paragraph) {\n        paragraph.isSelected = !paragraph.isSelected;\n        this.isSelectedList = paragraph.isSelected ?\n            [paragraph, ...this.isSelectedList] :\n            this.isSelectedList.filter(p => p.paragraphId !== paragraph.paragraphId);\n    }\n\n    save() {\n        this.matDialog.open(SaveDialogComponent)\n        .afterClosed()\n        .subscribe(folder => {\n            if (folder) {\n                const newFolder: Folder = {\n                    cardsLength: folder.cardsLength + this.isSelectedList.length,\n                    folderName: folder.folderName,\n                    id: folder.id,\n                    userUid: folder.userUid,\n                };\n\n                const selectedSections = this.isSelectedList.reduce((prev: any, curr: any) => {\n                    prev.push(<Card>{\n                        folder: newFolder,\n                        header: curr.header || null,\n                        paragraphIndex: curr.paragraphIndex,\n                        sectionIndex: curr.sectionIndex,\n                        text: curr.text\n                    });\n                    return prev;\n                }, []);\n\n                const saveCards = this.ngFireService.addBatch('cards', selectedSections);\n                const updateFolder = this.ngFireService.update('folders', newFolder.id, { cardsLength: newFolder.cardsLength });\n\n                Promise.all([saveCards, updateFolder])\n                .then(_ => {\n                    const isSelectedListIds = this.isSelectedList.map(paragraph => paragraph.paragraphId);\n\n                    this.sections$.next(\n                        this.sections$.getValue().map(section =>\n                            Object.assign({}, section, {\n                                paragraphs: section.paragraphs.filter(paragraph => !isSelectedListIds.includes(paragraph.paragraphId))\n                            })\n                        )\n                    );\n                })\n                .then(_ => this.isSelectedList = []);\n            }\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { auth } from 'firebase/app';\n\nimport { NgFireService } from '@shared/services';\n\n@Injectable()\nexport class SaveDialogService {\n    folders$ = this.ngFireService.load1Condition('folders', 'userUid', '==', auth().currentUser.uid);\n\n    constructor(private ngFireService: NgFireService) { }\n\n    addFolder(folderName: string) {\n        this.ngFireService.add('folders', {\n            cardsLength: 0,\n            folderName: folderName.trim(),\n            userUid: auth().currentUser.uid\n        });\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'app-tool-bar',\n    template: `\n        <mat-toolbar class=\"mat-elevation-z4\">\n            <button color=\"primary\" mat-icon-button>\n                <mat-icon routerLink=\"/app/search\">arrow_back</mat-icon>\n            </button>\n            <span id=\"title\">{{ title }}</span>\n            <button (click)=\"this.save.emit()\" [disabled]=\"!this.isSelectedListLength\" color=\"primary\" mat-icon-button>\n                <mat-icon>save</mat-icon>\n            </button>\n        </mat-toolbar>\n    `,\n    styles: [`\n        mat-toolbar {\n            background: #ECEFF1;\n            display: flex;\n            justify-content: space-between;\n            z-index: 1;\n            position: absolute;\n        }\n        #title {\n            opacity: 0.6;\n            text-transform: capitalize;\n        }\n    `]\n})\n\nexport class ToolBarComponent {\n    @Input() title: string;\n    @Input() isSelectedListLength: string;\n\n    @Output() save = new EventEmitter();\n}\n"],"sourceRoot":""}