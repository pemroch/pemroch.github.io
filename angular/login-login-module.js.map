{"version":3,"sources":["webpack:///./src/app/login/confirmation-snackbar/confirmation-snackbar.component.ts","webpack:///./src/app/login/form-card/form-card.component.ts","webpack:///./src/app/login/login-form/login-form.component.ts","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/login/login.module.ts","webpack:///./src/app/login/reset-password-form/reset-password-form.component.ts","webpack:///./src/app/login/reset-password.component.ts","webpack:///./src/app/login/services/login.service.ts","webpack:///./src/app/login/services/reset-password.service.ts","webpack:///./src/app/login/tool-bar/tool-bar.component.ts"],"names":[],"mappings":"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","file":"login-login-module.js","sourcesContent":["// Angular\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-confirmation-snackbar',\n    template: `\n        <p>Password reset email sent successfully</p>\n    `,\n    styles: [`\n        p {\n            text-align: center;\n        }\n    `]\n})\nexport class ConfirmationSnackbarComponent { }\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-form-card',\n    template: `\n        <mat-card>\n            <mat-card-title>Login</mat-card-title>\n            <ng-content></ng-content>\n        </mat-card>\n    `,\n    styles: [`\n        :host {\n            position: fixed;\n            width: 100%;\n            top: 64px;\n            bottom: 0px;\n            left: 0px;\n            right: 0px;\n            background: #eee;\n            height: 100%;\n            display: flex;\n            justify-content: center;\n            place-items: center;\n        }\n        mat-card {\n            width: 280px;\n            margin: 0px 8px 64px;\n        }\n    `]\n})\nexport class FormCardComponent { }\n","// Angular\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n    selector: 'app-login-form',\n    template: `\n        <form #form=\"ngForm\" (ngSubmit)=\"this.login.emit(this.form)\">\n            <mat-form-field>\n                <mat-icon matPrefix>email</mat-icon>\n                <input\n                    [(ngModel)]=\"this.email\"\n                    [disabled]=\"this.pending\"\n                    (ngModelChange)=\"this.clearError.emit()\"\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    autocorrect=\"off\"\n                    autocomplete=\"off\"\n                    matInput\n                    required\n                />\n            </mat-form-field>\n            <mat-form-field>\n                <mat-icon matPrefix>vpn_key</mat-icon>\n                <input\n                    [(ngModel)]=\"this.password\"\n                    [disabled]=\"this.pending\"\n                    (ngModelChange)=\"this.clearError.emit()\"\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    autocorrect=\"off\"\n                    autocomplete=\"off\"\n                    matInput\n                    required\n                />\n            </mat-form-field>\n            <button\n                [disabled]=\"this.pending\"\n                (click)=\"this.resetPassword.emit()\"\n                type=\"button\"\n                mat-button\n            >\n                Reset Password\n            </button>\n            <p class=\"mat-caption\">{{ this.error }}</p>\n            <button\n                [disabled]=\"this.form.invalid || this.pending\"\n                id=\"login-btn\"\n                type=\"submit\"\n                color=\"primary\"\n                mat-raised-button\n            >\n                Login\n            </button>\n        </form>\n    `,\n    styles: [`\n        app-form-card {\n            width: 280px;\n            margin: 0px 8px 64px;\n        }\n        mat-icon {\n            margin-right: 16px;\n            color: rgba(0, 0, 0, 0.54);\n        }\n        form {\n            text-align: right;\n        }\n        p {\n            text-align: center;\n            color: #F44336;\n        }\n        mat-form-field,\n        #login-btn {\n            width: 100%;\n            margin-top: 16px;\n        }\n    `],\n})\nexport class LoginFormComponent {\n    @Input() error: string;\n    @Input() pending: boolean;\n\n    @Output() login = new EventEmitter();\n    @Output() clearError = new EventEmitter();\n    @Output() resetPassword = new EventEmitter();\n\n    @ViewChild('form') form: NgForm;\n}\n","import { Component } from '@angular/core';\n\nimport { LoginService } from './services/login.service';\n\n@Component({\n    selector: 'app-login',\n    template: `\n        <app-tool-bar></app-tool-bar>\n        <app-form-card>\n            <app-login-form\n                [error]=\"this.loginService.error$ | async\"\n                [pending]=\"this.loginService.pending$ | async\"\n                (login)=\"this.loginService.login($event)\"\n                (clearError)=\"this.loginService.error$.next('')\"\n                (resetPassword)=\"this.loginService.resetPassword()\"\n            ></app-login-form>\n        </app-form-card>\n    `,\n    providers: [LoginService]\n})\nexport class LoginComponent {\n    constructor(public loginService: LoginService) { }\n}\n\n","// Modules\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatIconModule,\n    MatInputModule,\n    MatToolbarModule,\n    MatSnackBarModule\n} from '@angular/material';\nimport { RouterModule } from '@angular/router';\n// Module Components\nimport { LoginComponent } from './login.component';\nimport { ToolBarComponent } from './tool-bar/tool-bar.component';\nimport { LoginFormComponent } from './login-form/login-form.component';\nimport { FormCardComponent } from './form-card/form-card.component';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { ResetPasswordFormComponent } from './reset-password-form/reset-password-form.component';\nimport { ConfirmationSnackbarComponent } from './confirmation-snackbar/confirmation-snackbar.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatButtonModule,\n        MatCardModule,\n        MatDialogModule,\n        MatIconModule,\n        MatInputModule,\n        MatToolbarModule,\n        MatSnackBarModule,\n        RouterModule.forChild([\n            { path: '', component: LoginComponent },\n        ])\n    ],\n    declarations: [\n        LoginComponent,\n        ToolBarComponent,\n        LoginFormComponent,\n        FormCardComponent,\n        ResetPasswordComponent,\n        ResetPasswordFormComponent,\n        ConfirmationSnackbarComponent\n    ],\n    entryComponents: [ConfirmationSnackbarComponent, ResetPasswordComponent]\n})\nexport class LoginModule { }\n","// Angular\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n    selector: 'app-reset-password-form',\n    template: `\n        <form #form=\"ngForm\" (ngSubmit)=\"this.sendResetPasswordEmail.emit(this.form)\">\n            <mat-form-field>\n                <input\n                    [(ngModel)]=\"this.email\"\n                    [disabled]=\"this.pending\"\n                    (ngModelChange)=\"this.emailChange.emit$\"\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    autocorrect=\"off\"\n                    autocomplete=\"off\"\n                    matInput\n                    required\n                >\n            </mat-form-field>\n            <p class=\"mat-caption\">{{ this.error }}</p>\n            <div id=\"btn-container\">\n                <button\n                    (click)=\"this.closResetPasswordDialog.emit()\"\n                    [disabled]=\"this.pending\"\n                    type=\"button\"\n                    mat-button\n                >\n                    Cancel\n                </button>\n                <button\n                    [disabled]=\"this.form.invalid || this.pending\"\n                    type=\"submit\"\n                    color=\"primary\"\n                    mat-button\n                >\n                    Send Reset Email\n                </button>\n            </div>\n        </form>\n    `,\n    styles: [`\n        mat-form-field {\n            width: 100%;\n        }\n        p {\n            text-align: center;\n            color: #F44336;\n        }\n        .btn-container {\n            display: flex;\n            flex-direction: row-reverse;\n            margin-top: 16px;\n        }\n    `],\n})\nexport class ResetPasswordFormComponent {\n    @Input() error: string;\n    @Input() pending: boolean;\n\n    @Output() emailChange = new EventEmitter();\n    @Output() sendResetPasswordEmail = new EventEmitter();\n    @Output() closResetPasswordDialog = new EventEmitter();\n\n    @ViewChild('form') form: NgForm;\n}\n","// Angular\nimport { Component } from '@angular/core';\n// Component Service\nimport { ResetPasswordService } from './services/reset-password.service';\n\n@Component({\n    selector: 'app-reset-password',\n    template: `\n        <app-reset-password-form\n            [error]=\"this.resetPasswordService.error$ | async\"\n            [pending]=\"this.resetPasswordService.pending$ | async\"\n            (emailChange)=\"this.resetPasswordService.emailChange()\"\n            (sendResetPasswordEmail)=\"this.resetPasswordService.sendResetPasswordEmail($event)\"\n            (closResetPasswordDialog)=\"this.resetPasswordService.closResetPasswordDialog()\"\n        ></app-reset-password-form>\n    `,\n    providers: [ResetPasswordService]\n})\nexport class ResetPasswordComponent {\n  constructor(public resetPasswordService: ResetPasswordService) { }\n}\n","// Angular\nimport { Injectable } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MatDialog } from '@angular/material';\n// rxjs\nimport { Subject } from 'rxjs';\nimport { AngularFireAuth } from '@angular/fire/auth';\n// Module Components\nimport { ResetPasswordComponent } from '../reset-password.component';\n\n@Injectable()\nexport class LoginService {\n    error$ = new Subject<string>();\n    pending$ = new Subject<boolean>();\n\n    constructor(\n        private matDialog: MatDialog,\n        private angularFireAuth: AngularFireAuth\n    ) { }\n\n    login(form: NgForm) {\n        this.pending$.next(true);\n        this.angularFireAuth.auth.signInWithEmailAndPassword(form.value.email, form.value.password)\n        .catch(error => {\n            this.pending$.next(false);\n            this.error$.next(error);\n        });\n    }\n\n    resetPassword() {\n        this.matDialog.open(ResetPasswordComponent, { width: '280px' });\n    }\n}\n","// Angular\nimport { Injectable } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MatDialog, MatSnackBar } from '@angular/material';\nimport { AngularFireAuth } from '@angular/fire/auth';\n// rxjs\nimport { Subject } from 'rxjs';\n// Modules Components\nimport { ConfirmationSnackbarComponent } from '../confirmation-snackbar/confirmation-snackbar.component';\n\n@Injectable()\nexport class ResetPasswordService {\n    error$ = new Subject<string>();\n    pending$ = new Subject<boolean>();\n\n    closResetPasswordDialog() {\n        this.matDialog.closeAll();\n    }\n\n    sendResetPasswordEmail(form: NgForm) {\n        this.pending$.next(true);\n        this.angularFireAuth.auth.sendPasswordResetEmail(form.value.email)\n        .then(_ => {\n            this.pending$.next(false);\n            this.matDialog.closeAll();\n            this.matSnackBar.openFromComponent(ConfirmationSnackbarComponent, {\n                duration: 4000,\n            });\n        })\n        .catch(error => {\n            this.error$.next(error);\n            this.pending$.next(false);\n        });\n    }\n\n    constructor(\n        private angularFireAuth: AngularFireAuth,\n        private matDialog: MatDialog,\n        private matSnackBar: MatSnackBar,\n    ) { }\n}\n","// Angular\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-tool-bar',\n    template: `\n        <mat-toolbar style=\"height: 64px\" color=\"primary\">\n            <span>Click Wik</span>\n            <span id=\"spacer\"></span>\n            <button routerLink=\"/create-account\" mat-button>Create Account</button>\n        </mat-toolbar>\n    `,\n    styles: [`\n        #spacer {\n            display: flex;\n            flex: 1;\n        }\n    `]\n})\nexport class ToolBarComponent { }\n"],"sourceRoot":""}