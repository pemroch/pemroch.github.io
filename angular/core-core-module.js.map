{"version":3,"sources":["webpack:///./src/app/core/core.component.ts","webpack:///./src/app/core/core.module.ts","webpack:///./src/app/core/loading/loading.component.ts","webpack:///./src/app/core/nav-item/nav-item.component.ts","webpack:///./src/app/core/tool-bar/tool-bar.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAmE;AAEtB;AAoD7C;IACI,uBAAmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;IADvC,aAAa;QAlDzB,+DAAS,CAAC;YACP,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,iuDA6CT;YACD,eAAe,EAAE,qEAAuB,CAAC,MAAM;SAClD,CAAC;yCAEkC,yDAAW;OADlC,aAAa,CAEzB;IAAD,oBAAC;CAAA;AAFyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDe;AACM;AACwD;AACxD;AAEF;AAEI;AACgB;AACA;AACF;AA6B/D;IAAA;IAA0B,CAAC;IAAd,UAAU;QA3BtB,8DAAQ,CAAC;YACN,OAAO,EAAE;gBACL,4DAAY;gBACZ,iEAAe;gBACf,+DAAa;gBACb,kEAAgB;gBAChB,kEAAgB;gBAChB,4DAAY,CAAC,QAAQ,CAAC;oBAClB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,6DAAa,EAAE,QAAQ,EAAE;4BAC5C,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE;4BACrD,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,sCAAsC,EAAE;4BACxE,EAAE,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,4CAA4C,EAAE;4BAChF,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,yCAAyC,EAAE;4BAC5E,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,yCAAyC,EAAE;4BAC5E,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,mCAAmC,EAAE;4BACpE,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,yCAAyC,EAAE;yBAC/E,EAAE;iBACN,CAAC;aACL;YACD,YAAY,EAAE;gBACV,6DAAa;gBACb,6EAAgB;gBAChB,6EAAgB;gBAChB,2EAAgB;aACnB;YACD,SAAS,EAAE,CAAC,yDAAW,CAAC;SAC3B,CAAC;OACW,UAAU,CAAI;IAAD,iBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;ACvCmB;AAsB1C;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QApB5B,+DAAS,CAAC;YACP,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,8DAET;YACD,MAAM,EAAE,CAAC,kRAaZ,CAAC;SACD,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;ACtB0C;AA+BvE;IA7BA;QAiCc,aAAQ,GAAG,IAAI,0DAAY,EAAE,CAAC;IAC5C,CAAC;IAJY;QAAR,2DAAK,EAAE;;kDAAc;IACb;QAAR,2DAAK,EAAE;;mDAAe;IAEb;QAAT,4DAAM,EAAE;;sDAA+B;IAJ/B,gBAAgB;QA7B5B,+DAAS,CAAC;YACP,QAAQ,EAAE,cAAc;YACxB,QAAQ,EAAE,8LAKT;YACD,MAAM,EAAE,CAAC,8bAmBR,CAAC;SACL,CAAC;OACW,gBAAgB,CAK5B;IAAD,uBAAC;CAAA;AAL4B;;;;;;;;;;;;;;;;;;;;;;;;;AC/B0C;AAqBvE;IAnBA;QAsBc,kBAAa,GAAG,IAAI,0DAAY,EAAE,CAAC;IACjD,CAAC;IAHY;QAAR,2DAAK,EAAE;;0DAAsB;IAEpB;QAAT,4DAAM,EAAE;;2DAAoC;IAHpC,gBAAgB;QAnB5B,+DAAS,CAAC;YACP,QAAQ,EAAE,cAAc;YACxB,QAAQ,EAAE,6TAOT;YACD,MAAM,EAAE,CAAC,8JAOR,CAAC;SACL,CAAC;OACW,gBAAgB,CAI5B;IAAD,uBAAC;CAAA;AAJ4B","file":"core-core-module.js","sourcesContent":["import { Component, ChangeDetectionStrategy } from '@angular/core';\n\nimport { CoreService } from './core.service';\n\n@Component({\n    selector: 'app-core',\n    template: `\n        <mat-sidenav-container style=\"position: fixed; height: 100%; width: 100%;\">\n            <mat-sidenav\n                style=\"width: 250px;\"\n                [opened]=\"this.coreService.sidenavOpened$ | async\"\n                (closedStart)=\"this.coreService.sidenavOpened$.next(false)\"\n            >\n\n                <app-nav-item\n                    icon=\"search\"\n                    title=\"Search\"\n                    (navigate)=\"this.coreService.navigate(['app', 'search'])\"\n                ></app-nav-item>\n\n                <app-nav-item\n                    icon=\"folder\"\n                    title=\"Folders\"\n                    (navigate)=\"this.coreService.navigate(['app', 'folders'])\"\n                ></app-nav-item>\n\n                <app-nav-item\n                    icon=\"person\"\n                    title=\"Account\"\n                    (navigate)=\"this.coreService.navigate(['app', 'account'])\"\n                ></app-nav-item>\n\n                <app-nav-item\n                    icon=\"power_settings_new\"\n                    title=\"Logout\"\n                    (navigate)=\"this.coreService.logout()\"\n                ></app-nav-item>\n            </mat-sidenav>\n\n            <mat-sidenav-content>\n                <app-tool-bar\n                    [toolbarTitle]=\"this.coreService.toolbarTitle$ | async\"\n                    (sidenavToggle)=\"this.coreService.sidenavOpened$.next(!this.coreService.sidenavOpened$.getValue())\"\n                ></app-tool-bar>\n\n                <app-loading *ngIf=\"this.coreService.loading$ | async\"></app-loading>\n\n                <router-outlet></router-outlet>\n\n            </mat-sidenav-content>\n        </mat-sidenav-container>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CoreComponent {\n    constructor(public coreService: CoreService) { }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule, MatIconModule, MatSidenavModule, MatToolbarModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\nimport { CoreService } from './core.service';\n\nimport { CoreComponent } from './core.component';\nimport { ToolBarComponent } from './tool-bar/tool-bar.component';\nimport { NavItemComponent } from './nav-item/nav-item.component';\nimport { LoadingComponent } from './loading/loading.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MatButtonModule,\n        MatIconModule,\n        MatSidenavModule,\n        MatToolbarModule,\n        RouterModule.forChild([\n            { path: '', component: CoreComponent, children: [\n                { path: '', redirectTo: 'search', pathMatch: 'full' },\n                { path: 'search', loadChildren: '../search/search.module#SearchModule' },\n                { path: 'language', loadChildren: '../language/language.module#LanguageModule' },\n                { path: 'article', loadChildren: '../article/article.module#ArticleModule' },\n                { path: 'folders', loadChildren: '../folders/folders.module#FoldersModule' },\n                { path: 'cards', loadChildren: '../cards/cards.module#CardsModule' },\n                { path: 'account', loadChildren: '../account/account.module#AccountModule' },\n            ] },\n        ])\n    ],\n    declarations: [\n        CoreComponent,\n        ToolBarComponent,\n        NavItemComponent,\n        LoadingComponent\n    ],\n    providers: [CoreService]\n})\nexport class CoreModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-loading',\n    template: `\n        <div class=\"mat-headline\">Loading...</div>\n    `,\n    styles: [`\n    div {\n        position: absolute;\n        background: white;\n        top: 64px;\n        left: 0px;\n        right: 0px;\n        bottom: 0px;\n        z-index: 1000;\n        display: flex;\n        justify-content: center;\n        place-items: center;\n    }\n`]\n})\nexport class LoadingComponent { }\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'app-nav-item',\n    template: `\n        <a (click)=\"navigate.emit()\" mat-button>\n            <mat-icon mat-list-icon>{{ this.icon }}</mat-icon>\n            <span mat-line>{{ this.title }}</span>\n        </a>\n    `,\n    styles: [`\n        a {\n            width: 100%;\n            text-align: left;\n            padding-top: 6px;\n            padding-bottom: 6px;\n            border-bottom: 1px solid #ddd;\n        }\n        a:hover {\n            opacity: .8;\n        }\n        mat-icon {\n            color: rgba(0, 0, 0, 0.54);\n        }\n        span {\n            font-size: 15px;\n            font-weight: 400;\n            margin-left: 16px;\n        }\n    `]\n})\nexport class NavItemComponent {\n    @Input() icon: string;\n    @Input() title: string;\n\n    @Output() navigate = new EventEmitter();\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'app-tool-bar',\n    template: `\n        <mat-toolbar color=\"primary\">\n            <button (click)=\"this.sidenavToggle.emit()\" mat-icon-button>\n                <mat-icon class=\"material-icons\">menu</mat-icon>\n            </button>\n            <span id=\"toolbar-title\">{{ this.toolbarTitle || '' }}</span>\n        </mat-toolbar>\n    `,\n    styles: [`\n        mat-toolbar {\n            height: 64px !important;\n        }\n        #toolbar-title {\n            text-transform: capitalize;\n        }\n    `]\n})\nexport class ToolBarComponent {\n    @Input() toolbarTitle: string;\n\n    @Output() sidenavToggle = new EventEmitter();\n}\n"],"sourceRoot":""}